from _future_ import print_function
#for Videostream
import imutils
from imutils.video import VideoStream
from imutils.video import WebcamVideoStream
from pyzbar import pyzbar
import tkinter as tk 
#for numerical and other calculation
import argparse
import numpy as np
import datetime
#for OpenCV
import cv2
#for serial communication Arduino-Raspberry Pi
import serial
#for call other script in 'background'
import subprocess
from subprocess import Popen, PIPE
from time import sleep
import time
import os
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

#------------------SERVO------------------#
servoPIN = 18
GPIO.setup(servoPIN, GPIO.OUT)
p = GPIO.PWM(servoPIN, 50) # GPIO 17 for PWM with 50Hz
p.start(0)
p.ChangeDutyCycle(0)

#---------------Encoder_pins---------------#

print("Loading...")
sleep(1.00)

print("Start")

#------------------------------Function------------------------------#
flag_encoder_kanan = 0
flag_encoder_kiri = 0

# looping siklus counter timing encoder
counter_loop_encoder = 0

#Setting QR  Code Detection
#_________________
k1 = 'J1 (QRCODE)'
k2 = 'J2 (QRCODE)'
k3 = 'J3 (QRCODE)'
k4 = 'J4 (QRCODE)'
k5 = 'J5 (QRCODE)'
k6 = 'J6 (QRCODE)'
k7 = 'J7 (QRCODE)'


QR = '___'
def QR_Code():
    # construct the argument parser and parse the arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-o", "--output", type=str, default="barcodes.csv",
            help="path to output CSV file containing barcodes")
    args = vars(ap.parse_args())
    # initialize the video stream and allow the camera sensor to warm up
    print("starting video stream...")
    """
    """
    vs = VideoStream(src=0).start() #konfigurasi Raaspi Ifan
    #vs = VideoStream(src=1).start() #Konfigurasi Raspi Fandi
    """
    """
    csv = open(args["output"], "w")
    found = set()
    global QR

# loop over the frames from the video stream
# BN for flaging Barcode
    BN = 0;
    while True:
        # grab the frame from the threaded video stream and resize it to
        # have a maximum width of 400 pixels
        frame = vs.read()
        frame = imutils.resize(frame, width=400)

        # find the barcodes in the frame and decode each of the barcodes
        barcodes = pyzbar.decode(frame)

        # loop over the detected barcodes
        for barcode in barcodes:
        # extract the bounding box location of the barcode and draw
        # the bounding box surrounding the barcode on the image
            (x, y, w, h) = barcode.rect
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)

            # the barcode data is a bytes object so if we want to draw it
            # on our output image we need to convert it to a string first
            barcodeData = barcode.data.decode("utf-8")
            barcodeType = barcode.type

            # draw the barcode data and barcode type on the image
            text = "{} ({})".format(barcodeData, barcodeType)
            QR = str(text)
            print (QR)
            
            cv2.putText(frame, text, (x, y - 10),
            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
            #All Posibilities of Detection
            if (QR) == (k1):
                        print ('QR = J1')
                        BN = 2;
                    # if the barcode text is currently not in our CSV file, write
            # the timestamp + barcode to disk and update the set
            if (QR) == (k2):
                        print ('QR = J2')
                        BN = 2;
            if (QR) == (k3):
                        print ('QR = J3')
                        BN = 2;
            if (QR) == (k4):
                        print ('QR = J4')
                        BN = 2;
            if (QR) == (k5):
                        print ('QR = J5')
                        BN = 2;
            if (QR) == (k6):
                        print ('QR = J6')
                        BN = 2;
            if (QR) == (k7):
                        print ('QR = J7')
                        BN = 2;
            if BN > 0:
                break
            if barcodeData not in found:
                csv.write("{},{}\n".format(datetime.datetime.now(),
                    barcodeData))
                csv.flush()
                found.add(barcodeData)

    # show the output frame
 
    # if the `q` key was pressed, break from the loop
        if BN > 0:
                break

# close the output CSV file do a bit of cleanup
    print("cleaning up QR Caches")
    BN = 0;
    csv.close()
    cv2.destroyAllWindows()
    vs.stop()
#_________________

#Definisi awal, Setting, dan fungsi GUI
#_______________
master = tk.Tk()
master.title("GUI Robot_Anti-Covid")
master.geometry("336x150")

kamar1_state = True
kamar2_state = True
kamar3_state = True
kamar4_state = True
kamar5_state = True
kamar6_state = True
kamar7_state = True
kamar8_state = True
kamar9_state = True
kamar10_state = True
kamar11_state = True
manual_state = True



def kamar1():
    global kamar1_state
    if kamar1_state== True:
        #print ('menuju kamar A1')
        print ('Uji coba PS')
        PS()
        
def kamar2():
    global kamar2state
    if kamar2_state== True:
        #print ('menuju kamar A2')
        print ('Uji coba WDP')
        WDP()

def kamar3():
    global kamar3_state
    if kamar3_state== True:
        #print ('menuju kamar A3')
        print ('Uji coba PWDP')
        PWDP()
        
def kamar4():
    global kamar4_state
    if kamar4_state== True:
        #print ('menuju kamar A4')
        print ('Uji coba PA')
        PA()
      
def kamar5():
    global kamar5_state
    if kamar5_state== True:
        #print ('menuju kamar A5')
        print ('Uji coba PL')
        PL()

def kamar6():
    global kamar6_state
    if kamar6_state== True:
        #print ('menuju kamar A6')
        print ('Uji coba PR')
        PR()

def kamar7():
    global kamar7_state
    if kamar7_state== True:
        #print ('menuju kamar A6')
        print ('Uji coba Door')
        Door()

def kamar8():
    global kamar8_state
    if kamar8_state== True:
        print ('menuju kamar A8')

def kamar9():
    global kamar9_state
    if kamar9_state== True:
        print ('menuju kamar A9')

def kamar10():
    global kamar10_state
    if kamar10_state== True:
        print ('menuju kamar A10')

def kamar11():
    global kamar11_state
    if kamar11_state== True:
        #print ('menuju kamar A11')
        print ('Uji coba QR_Code')
        QR_Code()
        print (QR)
        
        
def manual():
    global manual_state
    if manual_state ==  True:
        print ('Program alih menjadi manual')
        kontrol_manual()
#_______________
"""
#definisi Pin Motor driver
#____________
en_r = 23
en_l = 24
pwmr = 12
pwml = 13

GPIO.setup(en_r , GPIO.OUT) #EN_R
GPIO.setup(en_l , GPIO.OUT) #EN_L
GPIO.setup(pwmr , GPIO.OUT) #PWM_R
GPIO.setup(pwml , GPIO.OUT) #PWM_L

#reset output
GPIO.setup(pwmr , GPIO.LOW) #PWM_R
GPIO.setup(pwml , GPIO.LOW) #PWM_L

#default PWM in Start
pa=GPIO.PWM(pwmr,1000)
pb=GPIO.PWM(pwml,1000)

pa.start(0)
pb.start(0)
#_________________
"""


def setup ():
    #program apa saja yang perlu dijalankan sebelum memulai program utama
    os.system ("sudo pigpiod")
    #Flag Room:
    RK = 1;
    R1 = 0;
    R2 = 0;
    R3 = 0;
    R4 = 0;
    R5 = 0;
    R6 = 0;
    R7 = 0;
    R8 = 0;
    R9 = 0;
    R10 = 0;
    R11 = 0;
    print('System Ready')
    
def kontrol_manual():
    #---------------------------Kode Awal---------------------------#

    ap = argparse.ArgumentParser()
    ap.add_argument("-o", "--output", type=str, default="barcodes.csv",
        help="path to output CSV file containing barcodes")
    args = vars(ap.parse_args())

# start video stream
    """
    #vs = WebcamVideoStream(src=1).start()
    """
    
    vs = WebcamVideoStream(src=0).start() #aku ganti 0, karena konfigurasku itu

    print("[INFO] starting video stream...")

# waktu bagi kamera untuk melakukan "pemanasan"
    sleep(2.0)

    status_jalan = "diam"

# warna
    aman = (0, 255, 0)
    bahaya = (0, 0, 255)
    peringatan = (0, 255, 255)

    us_d_tengah = aman
    us_d_kanan = aman
    us_d_kiri = aman

    us_b_tengah = aman
    us_b_kanan = aman
    us_b_kiri = aman

    default_num = 10000

    us_kiri_dpn = default_num
    us_tengah_dpn = default_num
    us_kanan_dpn = default_num

    us_kiri_blk = default_num
    us_tengah_blk = default_num
    us_kanan_blk = default_num

    encoder_dpn = 0
    width_camera_only = 600
#---------------------------Operation Code---------------------------#

# mengitung waktu untuk membaca serial arduino
    counter_us_dpn = 0
    subprocess.Popen(["python3", "serial_arduino_depan.py"], stdout=PIPE, stderr=PIPE)
    subprocess.Popen(["python3", "serial_arduino_belakang.py"], stdout=PIPE, stderr=PIPE)

    while(True):
    
    # Membaca kamera
    # mengambil frame
        frame = vs.read()
    
    # resize for real frame (detection)
        frame = imutils.resize(frame, width=400)
    
    # resize from real
        frame_copy = imutils.resize(frame, width = 800)
        camera_only_frame = imutils.resize(frame, width = width_camera_only)

        if counter_us_dpn == 5:
        # call serial_communication
        # read stored variable value in data_serial_depan.txt
            with open("data_serial_depan.txt", "r",encoding="utf-8") as g:
                data_serial_depan = list(map(int, g.readlines()))
            
        # get variable value from data_serial.txt
            us_tengah_dpn = data_serial_depan[1]#serial_arduino.us_tengah_dpn
            us_kanan_dpn = data_serial_depan[2]#serial_arduino.us_kanan_dpn
            us_kiri_dpn = data_serial_depan[0]#serial_arduino.us_kiri_dpn#
        
            with open("data_serial_belakang.txt", "r", encoding = "utf-8") as g:
                data_serial_belakang = list(map(int, g.readlines()))
            
            us_tengah_blk = data_serial_belakang[1]#serial_arduino.us_tengah_blk#
            us_kanan_blk = data_serial_belakang[2]#serial_arduino.us_kanan_blk#
            us_kiri_blk = data_serial_belakang[0]#serial_arduino.us_kiri_blk#
        
        
        # Kondisi di layar
        # us_depan
            if us_tengah_dpn <= 50:
                us_d_tengah = bahaya
            if us_tengah_dpn > 50:
                us_d_tengah = aman
            if us_kanan_dpn <= 30:
                us_d_kanan = bahaya
            if us_kanan_dpn > 30:
                us_d_kanan = aman
            if us_kiri_dpn <=30:
                us_d_kiri = bahaya
            if us_kiri_dpn > 30:
                us_d_kiri = aman

        # us_belakang
            if us_tengah_blk <= 50:
                us_b_tengah = bahaya
            if us_tengah_blk > 50:
                us_b_tengah = aman
            if us_kanan_blk <= 30:
                us_b_kanan = bahaya
            if us_kanan_blk > 30:
                us_b_kanan = aman
            if us_kiri_blk <=30:
                us_b_kiri = bahaya
            if us_kiri_blk > 30:
                us_b_kiri = aman
        
            counter_us_dpn = 0

    # status_us_depan
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.rectangle(frame_copy,(0, 0),(300, 10),us_d_kiri,20)
        cv2.rectangle(frame_copy,(500, 0),(800, 10),us_d_kanan,20)
        cv2.rectangle(frame_copy,(400-150, 0),(400+150, 20),us_d_tengah,30)
        cv2.putText(frame_copy,'{}'.format(us_kiri_dpn),(50,15), font, 0.6,(255,255,255),2,cv2.LINE_AA)
        cv2.putText(frame_copy,'{}'.format(us_tengah_dpn),(385,15), font, 0.6,(255,255,255),2,cv2.LINE_AA)
        cv2.putText(frame_copy,'{}'.format(us_kanan_dpn),(700,15), font, 0.6,(255,255,255),2,cv2.LINE_AA)

    # status_us_belakang
        cv2.rectangle(frame_copy,(0, 590),(300, 600),us_b_kiri,20)
        cv2.rectangle(frame_copy,(500, 590),(800, 600),us_b_kanan,20)
        cv2.rectangle(frame_copy,(400-150, 580),(400+150, 600),us_b_tengah,30)
        cv2.putText(frame_copy,'{}'.format(us_kiri_blk),(50,595), font, 0.6,(255,255,255),2,cv2.LINE_AA)
        cv2.putText(frame_copy,'{}'.format(us_tengah_blk),(385,585), font, 0.6,(255,255,255),2,cv2.LINE_AA)
        cv2.putText(frame_copy,'{}'.format(us_kanan_blk),(700,595), font, 0.6,(255,255,255),2,cv2.LINE_AA)
    
        cv2.putText(frame_copy,'Robot {}'.format(status_jalan),(10,50), font, 0.6,(255,255,255),1,cv2.LINE_AA)
    #cv2.putText(frame_copy,'Encoder {}'.format(encoder_dpn),(10,70), font, 0.6,(255,255,255),1,cv2.LINE_AA)
    
    # info tab
        cv2.putText(camera_only_frame,'Q ~ keluar dari program',(10,600-10), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'W ~ maju',(10,600-150), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'S ~ mundur',(10,600 - 130), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'A ~ belok kiri',(10,600 - 110), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'D ~ belok kanan',(10, 600 - 90), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'X ~ berhenti',(10, 600 - 70), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'O ~ kamera kiri',(10, 600 - 50), font, 0.6,(255,255,255),1,cv2.LINE_AA)
        cv2.putText(camera_only_frame,'P ~ kamera kanan',(10, 600 - 30), font, 0.6,(255,255,255),1,cv2.LINE_AA)

        cv2.putText(frame_copy,'{}'.format(counter_us_dpn),(775,50), font, 0.5,(255,255,255),1,cv2.LINE_AA)

    # show image
    # Frame asli
    #cv2.imshow("Frame", frame)
    #cv2.imshow("Copy", frame_copy)
    
    # hanya tangkapan kamera
        cv2.imshow("Kamera", camera_only_frame)
    
    # Pengecilan 2x dari "Frame asli"
        status_frame = imutils.resize(frame_copy, width=400)
        cv2.imshow("Status", status_frame)
    
    # menambah counter
        counter_us_dpn = counter_us_dpn+1

        key = cv2.waitKey(1) & 0xFF
        if key == ord("w"):
            maju()
            status_jalan = "maju"
        if key == ord("s"):
            mundur()
            status_jalan = "mundur"
        if key == ord("d"):
            kanan()                        
        if key == ord("a"):
            kiri()
        if key == ord("x"):
            diam()
            status_jalan = "berhenti"

        if key == ord("o"):
            p.ChangeDutyCycle(5)
            time.sleep(0.05)
            p.ChangeDutyCycle(0)
        
        if key == ord("p"):
            p.ChangeDutyCycle(10)
            time.sleep(0.05)
            p.ChangeDutyCycle(0)
        
        if key == ord("m"): #buka pintu
            IR()

                
        if key == ord("q"):
            break

    print("[INFO] cleaning up...")
    cv2.destroyAllWindows()
    vs.stop()
    
# define for calling script
#___________________
def kanan():
    flag_encoder_kanan = 1
    p_kanan=subprocess.Popen(["python3", "kontrol_motor_kanan.py"], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p_kanan.communicate()
    print(stdout)
    
def kiri():
    flag_encoder_kiri = 1
    p_kiri=subprocess.Popen(["python3", "kontrol_motor_kiri.py"], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p_kiri.communicate()
    print(stdout)

def mundur():
    p_mundur=subprocess.Popen(["python3", "kontrol_motor_mundur.py"], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p_mundur.communicate()
    print(stdout)
    
def maju():
    p_maju=subprocess.Popen(["python3", "kontrol_motor_maju.py"], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p_maju.communicate()
    print(stdout)
    
def diam():
    p_diam=subprocess.Popen(["python3", "kontrol_motor_diam.py"], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p_diam.communicate()
    print(stdout)
#______________________
"""
Untuk uji coba dengan Motor biasa

def lurus ():
    #program jalan lurus
    pa.ChangeDutyCycle(40)
    pb.ChangeDutyCycle(0)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH) 
    print ("Lurus");

def lurus_p ():
    #program jalan lurus
    pa.ChangeDutyCycle(30)
    pb.ChangeDutyCycle(0)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH) 
    print ("Lurus Perlahan");

def kanan ():
    #belok kanan
    pa.ChangeDutyCycle(40)
    pb.ChangeDutyCycle(0)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH)
    time.sleep(1)
    pa.ChangeDutyCycle(0)
    pb.ChangeDutyCycle(40)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH)
    time.sleep(1)
    GPIO.output(en_r , GPIO.LOW)  
    GPIO.output(en_l , GPIO.LOW)
    print ("belok Kanan");

def kiri ():
    #belok kiri
    pa.ChangeDutyCycle(0)
    pb.ChangeDutyCycle(40)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH)
    time.sleep(1)
    pa.ChangeDutyCycle(40)
    pb.ChangeDutyCycle(0)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH)
    time.sleep(1)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH)
    print ("belok Kiri");

def mundur ():
    #bergerak kebelakang
    pa.ChangeDutyCycle(0)
    pb.ChangeDutyCycle(40)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH) 
    time.sleep(0.7)
    GPIO.output(en_r , GPIO.LOW)  
    GPIO.output(en_l , GPIO.LOW)
    print ("Mundur");

def diam ():
    #bergerak kebelakang
    pa.ChangeDutyCycle(0)
    pb.ChangeDutyCycle(0)
    GPIO.output(en_r , GPIO.HIGH)  
    GPIO.output(en_l , GPIO.HIGH)
    print ("Berhenti");
"""
def IR ():
    #GPIO for the IR transmitter: 22
    #os.system ("sudo pigpiod")
    from ircodec.command import CommandSet
    controller = CommandSet.load('Ardoor.json')
    time.sleep (0.002)
    controller.emit('Trigger')
    print ('Wave send')


#Juction Codes
J1 = 'J1 (QRCODE)'
J2 = 'J2 (QRCODE)'
J3 = 'J3 (QRCODE)'
J4 = 'J4 (QRCODE)'
J5 = 'J5 (QRCODE)'
J6 = 'J6 (QRCODE)'
J7 = 'J7 (QRCODE)'

#Base Command
#___________
#Statment:
#PS: Start Program (only for RK start Point) V
#SPP: Steady and ready Position Program [harus survei dulu]
#SPLP: Steady and ready Position for Last sequence Program [harus survei dulu]
#WDP: Walk and Detection Program (make robot for move for certain distance) V
#PWDP: Pass the current Junction and continous WDP  V
#PA: Program to Across the Juntion (mirip dengan WDP, namun Lebih banyak junctionnya) V
#PL: Program to Turn Left V
#PR: Program to Turn Righ V
#Flag = Last Position of Robot (1 = on, 0 = off)
#D/Door = Program for evertime encounter door V
#MAEP: Model A Room Environment Program (kontrol manual) 
#MBEP: Model B Room Environment Program (kontrol manual)

US = 300;
def PS () :
    print ("Processing PS");
    global US
    time.sleep (0.05)
    maju()
    QR_Code()
    while True:
        if (QR) == (J1):
            print ('Code Match')
            kanan()
            US-=200; #perumpaan agar program berjalan sementara tanpa sensor US
        if US < 200: #US nilai jarak ultrasonic
            diam()
            time.sleep(0.001)
            IR()
            i = 0;
            US+=200; #perumpaan agar program berjalan sementara tanpa sensor US
            break
    print ('PS Selesai')

def WDP () :
    print ("Processing WDP");
    time.sleep (0.05)
    maju()
    QR_Code()
    while True:
        if (QR) == (J2):
            print ('Junction J2 Detected')
            break
        if (QR) == (J3):
            print ('Junction J3 Detected')
            break
        if (QR) == (J4):
            print ('Junction J4 Detected')
            break
        if (QR) == (J5):
            print ('Junction J5 Detected')
            break
        if (QR) == (J6):
            print ('Junction J6 Detected')
            break
    print ('WDP Selesai, robot berjalan melewati Juntion')

def PWDP () :
    print ("Processing PWDP");
    time.sleep (0.05)
    maju()
    QR_Code()
    while True:
        if (QR) == (J2):
            print ('Junction J2 Detected')
            break
        if (QR) == (J3):
            print ('Junction J3 Detected')
            break
        if (QR) == (J4):
            print ('Junction J4 Detected')
            break
        if (QR) == (J5):
            print ('Junction J5 Detected')
            break
        if (QR) == (J6):
            print ('Junction J6 Detected')
            break
    print ('PWDP Selesai, robot berjalan melewati Juntion')

def PA () :
    print ("Processing PA");
    time.sleep (0.05)
    maju()
    QR_Code()
    while True:
        if (QR) == (J2):
            print ('Junction J2 Detected')
            break
        if (QR) == (J3):
            print ('Junction J3 Detected')
            break
        if (QR) == (J4):
            print ('Junction J4 Detected')
            break
        if (QR) == (J5):
            print ('Junction J5 Detected')
            break
        if (QR) == (J6):
            print ('Junction J6 Detected')
            break
        if (QR) == (J7):
            print ('Junction J7 Detected')
            break
    print ('PA Selesai, robot berjalan menyebrang Juntion')

def PL () :
    print ("Processing PL");
    time.sleep (0.05)
    maju()
    QR_Code()
    while True:
        if (QR) == (J2):
            print ('Junction J2 Detected')
            kiri()
            break
        if (QR) == (J3):
            print ('Junction J3 Detected')
            kiri()
            break
        if (QR) == (J4):
            print ('Junction J4 Detected')
            kiri()
            break
        if (QR) == (J5):
            print ('Junction J5 Detected')
            kiri()
            break
        if (QR) == (J6):
            print ('Junction J6 Detected')
            kiri()
            break
        if (QR) == (J7):
            print ('Junction J7 Detected')
            kiri()
            break
    print ('PL Selesai, robot berbelok kiri pada Juntion')

def PR () :
    print ("Processing PR");
    time.sleep (0.05)
    maju()
    QR_Code()
    while True:
        if (QR) == (J2):
            print ('Junction J2 Detected')
            kanan()
            break
        if (QR) == (J3):
            print ('Junction J3 Detected')
            kanan()
            break
        if (QR) == (J4):
            print ('Junction J4 Detected')
            kanan()
            break
        if (QR) == (J5):
            print ('Junction J5 Detected')
            kanan()
            break
        if (QR) == (J6):
            print ('Junction J6 Detected')
            kanan()
            break
        if (QR) == (J7):
            print ('Junction J7 Detected')
            kanan()
            break
    print ('PR Selesai, robot berbelok kanan pada Juntion')

def Door ():
    maju()
    time.sleep(1)
    US = 100; #perumpaan agar program berjalan sementara tanpa sensor US
    while True:
        if US < 200:
            diam()
            IR()
            print ('membuka pintu')
            time.sleep(5)
            US = 300; #perumpaan agar program berjalan sementara tanpa sensor US
            break
    print ('Robot Berlajalan masuk')
    maju()
    time.sleep(7)
    diam()
    print ('Robot telah memasuki ruangan')
#_________________________
#Startup
setup ()
#Button Mapping GUI:
#__________________

Button1= tk.Button(master, text="Kamar A1", bg="gray", command= kamar1, height = 1, width = 7)
Button1.grid(row=0, column=0)

Button2= tk.Button(master, text="Kamar A2",bg="white", command= kamar2, height = 1, width = 7)
Button2.grid(row=1, column=0)

Button3= tk.Button(master, text="Kamar A3", bg="gray", command= kamar3, height = 1, width = 7)
Button3.grid(row=2, column=0)

Button4= tk.Button(master, text="Kamar A4",bg="white", command= kamar4, height = 1, width = 7)
Button4.grid(row=0, column=1)

Button5= tk.Button(master, text="Kamar A5", bg="gray", command= kamar5, height = 1, width = 7)
Button5.grid(row=1, column=1)

Button6= tk.Button(master, text="Kamar A6",bg="white", command= kamar6, height = 1, width = 7)
Button6.grid(row=2, column=1)

Button7= tk.Button(master, text="Kamar A7",bg="gray", command= kamar7, height = 1, width = 7)
Button7.grid(row=0, column=2)

Button8= tk.Button(master, text="Kamar A8",bg="white", command= kamar8, height = 1, width = 7)
Button8.grid(row=1, column=2)

Button9= tk.Button(master, text="Kamar A9",bg="gray", command= kamar9, height = 1, width = 7)
Button9.grid(row=2, column=2)

Button10= tk.Button(master, text="Kamar A10",bg="white", command= kamar10, height = 1, width = 7)
Button10.grid(row=0, column=3)

Button11= tk.Button(master, text="Kamar A11",bg="gray", command= kamar11, height = 1, width = 7)
Button11.grid(row=1, column=3)

Button12= tk.Button(master, text="Manual", bg="blue", command= manual, height = 1, width = 7)
Button12.grid(row=2, column=3)

Exitbutton = tk.Button(master, text="Exit",bg="red", command=master.destroy, height = 1, width = 7)
Exitbutton.grid(row=3, column=3)
master.mainloop()

#_________________

#Door ()
GPIO.cleanup()
